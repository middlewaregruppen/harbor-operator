// Code generated by go-swagger; DO NOT EDIT.

package jobservice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new jobservice API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for jobservice API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ActionPendingJobs(params *ActionPendingJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionPendingJobsOK, error)

	GetWorkerPools(params *GetWorkerPoolsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkerPoolsOK, error)

	GetWorkers(params *GetWorkersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkersOK, error)

	ListJobQueues(params *ListJobQueuesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListJobQueuesOK, error)

	StopRunningJob(params *StopRunningJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopRunningJobOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ActionPendingJobs stops and clean pause resume pending jobs in the queue

stop and clean, pause, resume pending jobs in the queue
*/
func (a *Client) ActionPendingJobs(params *ActionPendingJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionPendingJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionPendingJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "actionPendingJobs",
		Method:             "PUT",
		PathPattern:        "/jobservice/queues/{job_type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActionPendingJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionPendingJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for actionPendingJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkerPools gets worker pools

Get worker pools
*/
func (a *Client) GetWorkerPools(params *GetWorkerPoolsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkerPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkerPoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkerPools",
		Method:             "GET",
		PathPattern:        "/jobservice/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWorkerPoolsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkerPoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkerPools: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkers gets workers

Get workers in current pool
*/
func (a *Client) GetWorkers(params *GetWorkersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkers",
		Method:             "GET",
		PathPattern:        "/jobservice/pools/{pool_id}/workers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetWorkersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListJobQueues lists job queues

list job queue
*/
func (a *Client) ListJobQueues(params *ListJobQueuesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListJobQueuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListJobQueuesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listJobQueues",
		Method:             "GET",
		PathPattern:        "/jobservice/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListJobQueuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListJobQueuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listJobQueues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopRunningJob stops running job

Stop running job
*/
func (a *Client) StopRunningJob(params *StopRunningJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopRunningJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopRunningJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopRunningJob",
		Method:             "PUT",
		PathPattern:        "/jobservice/jobs/{job_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopRunningJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopRunningJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopRunningJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
