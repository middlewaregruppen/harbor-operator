// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new replication API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for replication API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateReplicationPolicy(params *CreateReplicationPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReplicationPolicyCreated, error)

	DeleteReplicationPolicy(params *DeleteReplicationPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteReplicationPolicyOK, error)

	GetReplicationExecution(params *GetReplicationExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReplicationExecutionOK, error)

	GetReplicationLog(params *GetReplicationLogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReplicationLogOK, error)

	GetReplicationPolicy(params *GetReplicationPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReplicationPolicyOK, error)

	ListReplicationExecutions(params *ListReplicationExecutionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListReplicationExecutionsOK, error)

	ListReplicationPolicies(params *ListReplicationPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListReplicationPoliciesOK, error)

	ListReplicationTasks(params *ListReplicationTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListReplicationTasksOK, error)

	StartReplication(params *StartReplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartReplicationCreated, error)

	StopReplication(params *StopReplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopReplicationOK, error)

	UpdateReplicationPolicy(params *UpdateReplicationPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReplicationPolicyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateReplicationPolicy creates a replication policy

Create a replication policy
*/
func (a *Client) CreateReplicationPolicy(params *CreateReplicationPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReplicationPolicyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReplicationPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createReplicationPolicy",
		Method:             "POST",
		PathPattern:        "/replication/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateReplicationPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateReplicationPolicyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createReplicationPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteReplicationPolicy deletes the specific replication policy

Delete the specific replication policy
*/
func (a *Client) DeleteReplicationPolicy(params *DeleteReplicationPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteReplicationPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReplicationPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteReplicationPolicy",
		Method:             "DELETE",
		PathPattern:        "/replication/policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteReplicationPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteReplicationPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteReplicationPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReplicationExecution gets the specific replication execution

Get the replication execution specified by ID
*/
func (a *Client) GetReplicationExecution(params *GetReplicationExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReplicationExecutionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReplicationExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReplicationExecution",
		Method:             "GET",
		PathPattern:        "/replication/executions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetReplicationExecutionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReplicationExecutionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReplicationExecution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReplicationLog gets the log of the specific replication task

Get the log of the specific replication task
*/
func (a *Client) GetReplicationLog(params *GetReplicationLogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReplicationLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReplicationLogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReplicationLog",
		Method:             "GET",
		PathPattern:        "/replication/executions/{id}/tasks/{task_id}/log",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetReplicationLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReplicationLogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReplicationLog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetReplicationPolicy gets the specific replication policy

Get the specific replication policy
*/
func (a *Client) GetReplicationPolicy(params *GetReplicationPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReplicationPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReplicationPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getReplicationPolicy",
		Method:             "GET",
		PathPattern:        "/replication/policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetReplicationPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReplicationPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReplicationPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListReplicationExecutions lists replication executions

List replication executions
*/
func (a *Client) ListReplicationExecutions(params *ListReplicationExecutionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListReplicationExecutionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListReplicationExecutionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listReplicationExecutions",
		Method:             "GET",
		PathPattern:        "/replication/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListReplicationExecutionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListReplicationExecutionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listReplicationExecutions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListReplicationPolicies lists replication policies

List replication policies
*/
func (a *Client) ListReplicationPolicies(params *ListReplicationPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListReplicationPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListReplicationPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listReplicationPolicies",
		Method:             "GET",
		PathPattern:        "/replication/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListReplicationPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListReplicationPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listReplicationPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListReplicationTasks lists replication tasks for a specific execution

List replication tasks for a specific execution
*/
func (a *Client) ListReplicationTasks(params *ListReplicationTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListReplicationTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListReplicationTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listReplicationTasks",
		Method:             "GET",
		PathPattern:        "/replication/executions/{id}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListReplicationTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListReplicationTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listReplicationTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartReplication starts one replication execution

Start one replication execution according to the policy
*/
func (a *Client) StartReplication(params *StartReplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartReplicationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartReplicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startReplication",
		Method:             "POST",
		PathPattern:        "/replication/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartReplicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartReplicationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for startReplication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopReplication stops the specific replication execution

Stop the replication execution specified by ID
*/
func (a *Client) StopReplication(params *StopReplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopReplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopReplicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopReplication",
		Method:             "PUT",
		PathPattern:        "/replication/executions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopReplicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopReplicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopReplication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateReplicationPolicy updates the replication policy

Update the replication policy
*/
func (a *Client) UpdateReplicationPolicy(params *UpdateReplicationPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReplicationPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReplicationPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateReplicationPolicy",
		Method:             "PUT",
		PathPattern:        "/replication/policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateReplicationPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateReplicationPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateReplicationPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
