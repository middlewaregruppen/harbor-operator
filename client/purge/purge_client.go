// Code generated by go-swagger; DO NOT EDIT.

package purge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new purge API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for purge API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePurgeSchedule(params *CreatePurgeScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePurgeScheduleCreated, error)

	GetPurgeHistory(params *GetPurgeHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPurgeHistoryOK, error)

	GetPurgeJob(params *GetPurgeJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPurgeJobOK, error)

	GetPurgeJobLog(params *GetPurgeJobLogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPurgeJobLogOK, error)

	GetPurgeSchedule(params *GetPurgeScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPurgeScheduleOK, error)

	StopPurge(params *StopPurgeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopPurgeOK, error)

	UpdatePurgeSchedule(params *UpdatePurgeScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePurgeScheduleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreatePurgeSchedule creates a purge job schedule

This endpoint is for update purge job schedule.
*/
func (a *Client) CreatePurgeSchedule(params *CreatePurgeScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePurgeScheduleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePurgeScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPurgeSchedule",
		Method:             "POST",
		PathPattern:        "/system/purgeaudit/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreatePurgeScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePurgeScheduleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPurgeSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPurgeHistory gets purge job results

get purge job execution history.
*/
func (a *Client) GetPurgeHistory(params *GetPurgeHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPurgeHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPurgeHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPurgeHistory",
		Method:             "GET",
		PathPattern:        "/system/purgeaudit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPurgeHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPurgeHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPurgeHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPurgeJob gets purge job status

This endpoint let user get purge job status filtered by specific ID.
*/
func (a *Client) GetPurgeJob(params *GetPurgeJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPurgeJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPurgeJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPurgeJob",
		Method:             "GET",
		PathPattern:        "/system/purgeaudit/{purge_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPurgeJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPurgeJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPurgeJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPurgeJobLog gets purge job log

This endpoint let user get purge job logs filtered by specific ID.
*/
func (a *Client) GetPurgeJobLog(params *GetPurgeJobLogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPurgeJobLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPurgeJobLogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPurgeJobLog",
		Method:             "GET",
		PathPattern:        "/system/purgeaudit/{purge_id}/log",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPurgeJobLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPurgeJobLogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPurgeJobLog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPurgeSchedule gets purge s schedule

This endpoint is for get schedule of purge job.
*/
func (a *Client) GetPurgeSchedule(params *GetPurgeScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPurgeScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPurgeScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPurgeSchedule",
		Method:             "GET",
		PathPattern:        "/system/purgeaudit/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPurgeScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPurgeScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPurgeSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPurge stops the specific purge audit log execution

Stop the purge audit log execution specified by ID
*/
func (a *Client) StopPurge(params *StopPurgeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopPurgeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPurgeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopPurge",
		Method:             "PUT",
		PathPattern:        "/system/purgeaudit/{purge_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopPurgeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPurgeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopPurge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePurgeSchedule updates purge job s schedule

This endpoint is for update purge job schedule.
*/
func (a *Client) UpdatePurgeSchedule(params *UpdatePurgeScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePurgeScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePurgeScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePurgeSchedule",
		Method:             "PUT",
		PathPattern:        "/system/purgeaudit/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdatePurgeScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePurgeScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePurgeSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
