// Code generated by go-swagger; DO NOT EDIT.

package quota

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListQuotasParams creates a new ListQuotasParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListQuotasParams() *ListQuotasParams {
	return &ListQuotasParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListQuotasParamsWithTimeout creates a new ListQuotasParams object
// with the ability to set a timeout on a request.
func NewListQuotasParamsWithTimeout(timeout time.Duration) *ListQuotasParams {
	return &ListQuotasParams{
		timeout: timeout,
	}
}

// NewListQuotasParamsWithContext creates a new ListQuotasParams object
// with the ability to set a context for a request.
func NewListQuotasParamsWithContext(ctx context.Context) *ListQuotasParams {
	return &ListQuotasParams{
		Context: ctx,
	}
}

// NewListQuotasParamsWithHTTPClient creates a new ListQuotasParams object
// with the ability to set a custom HTTPClient for a request.
func NewListQuotasParamsWithHTTPClient(client *http.Client) *ListQuotasParams {
	return &ListQuotasParams{
		HTTPClient: client,
	}
}

/*
ListQuotasParams contains all the parameters to send to the API endpoint

	for the list quotas operation.

	Typically these are written to a http.Request.
*/
type ListQuotasParams struct {

	/* XRequestID.

	   An unique ID for the request
	*/
	XRequestID *string

	/* Page.

	   The page number

	   Format: int64
	   Default: 1
	*/
	Page *int64

	/* PageSize.

	   The size of per page

	   Format: int64
	   Default: 10
	*/
	PageSize *int64

	/* Reference.

	   The reference type of quota.
	*/
	Reference *string

	/* ReferenceID.

	   The reference id of quota.
	*/
	ReferenceID *string

	/* Sort.

	     Sort method, valid values include:
	'hard.resource_name', '-hard.resource_name', 'used.resource_name', '-used.resource_name'.
	Here '-' stands for descending order, resource_name should be the real resource name of the quota.

	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list quotas params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListQuotasParams) WithDefaults() *ListQuotasParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list quotas params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListQuotasParams) SetDefaults() {
	var (
		pageDefault = int64(1)

		pageSizeDefault = int64(10)
	)

	val := ListQuotasParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list quotas params
func (o *ListQuotasParams) WithTimeout(timeout time.Duration) *ListQuotasParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list quotas params
func (o *ListQuotasParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list quotas params
func (o *ListQuotasParams) WithContext(ctx context.Context) *ListQuotasParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list quotas params
func (o *ListQuotasParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list quotas params
func (o *ListQuotasParams) WithHTTPClient(client *http.Client) *ListQuotasParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list quotas params
func (o *ListQuotasParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the list quotas params
func (o *ListQuotasParams) WithXRequestID(xRequestID *string) *ListQuotasParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the list quotas params
func (o *ListQuotasParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithPage adds the page to the list quotas params
func (o *ListQuotasParams) WithPage(page *int64) *ListQuotasParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list quotas params
func (o *ListQuotasParams) SetPage(page *int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the list quotas params
func (o *ListQuotasParams) WithPageSize(pageSize *int64) *ListQuotasParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list quotas params
func (o *ListQuotasParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithReference adds the reference to the list quotas params
func (o *ListQuotasParams) WithReference(reference *string) *ListQuotasParams {
	o.SetReference(reference)
	return o
}

// SetReference adds the reference to the list quotas params
func (o *ListQuotasParams) SetReference(reference *string) {
	o.Reference = reference
}

// WithReferenceID adds the referenceID to the list quotas params
func (o *ListQuotasParams) WithReferenceID(referenceID *string) *ListQuotasParams {
	o.SetReferenceID(referenceID)
	return o
}

// SetReferenceID adds the referenceId to the list quotas params
func (o *ListQuotasParams) SetReferenceID(referenceID *string) {
	o.ReferenceID = referenceID
}

// WithSort adds the sort to the list quotas params
func (o *ListQuotasParams) WithSort(sort *string) *ListQuotasParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the list quotas params
func (o *ListQuotasParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *ListQuotasParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.Reference != nil {

		// query param reference
		var qrReference string

		if o.Reference != nil {
			qrReference = *o.Reference
		}
		qReference := qrReference
		if qReference != "" {

			if err := r.SetQueryParam("reference", qReference); err != nil {
				return err
			}
		}
	}

	if o.ReferenceID != nil {

		// query param reference_id
		var qrReferenceID string

		if o.ReferenceID != nil {
			qrReferenceID = *o.ReferenceID
		}
		qReferenceID := qrReferenceID
		if qReferenceID != "" {

			if err := r.SetQueryParam("reference_id", qReferenceID); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
