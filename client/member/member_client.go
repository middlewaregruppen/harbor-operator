// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new member API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for member API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateProjectMember(params *CreateProjectMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectMemberCreated, error)

	DeleteProjectMember(params *DeleteProjectMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectMemberOK, error)

	GetProjectMember(params *GetProjectMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectMemberOK, error)

	ListProjectMembers(params *ListProjectMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectMembersOK, error)

	UpdateProjectMember(params *UpdateProjectMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectMemberOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateProjectMember creates project member

Create project member relationship, the member can be one of the user_member and group_member,  The user_member need to specify user_id or username. If the user already exist in harbor DB, specify the user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member need to specify id or ldap_group_dn. If the group already exist in harbor DB. specify the user group's id,  If does not exist, it will SearchAndOnBoard the group.
*/
func (a *Client) CreateProjectMember(params *CreateProjectMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectMemberCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createProjectMember",
		Method:             "POST",
		PathPattern:        "/projects/{project_name_or_id}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateProjectMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectMemberCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProjectMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProjectMember deletes project member
*/
func (a *Client) DeleteProjectMember(params *DeleteProjectMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProjectMember",
		Method:             "DELETE",
		PathPattern:        "/projects/{project_name_or_id}/members/{mid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProjectMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectMember gets the project member information

Get the project member information
*/
func (a *Client) GetProjectMember(params *GetProjectMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectMember",
		Method:             "GET",
		PathPattern:        "/projects/{project_name_or_id}/members/{mid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListProjectMembers gets all project member information

Get all project member information
*/
func (a *Client) ListProjectMembers(params *ListProjectMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProjectMembers",
		Method:             "GET",
		PathPattern:        "/projects/{project_name_or_id}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListProjectMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listProjectMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateProjectMember updates project member

Update project member relationship
*/
func (a *Client) UpdateProjectMember(params *UpdateProjectMemberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectMemberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProjectMember",
		Method:             "PUT",
		PathPattern:        "/projects/{project_name_or_id}/members/{mid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateProjectMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProjectMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
