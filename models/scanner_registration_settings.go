// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScannerRegistrationSettings scanner registration settings
//
// swagger:model ScannerRegistrationSettings
type ScannerRegistrationSettings struct {

	// An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.
	//
	// Example: Bearer: JWTTOKENGOESHERE
	AccessCredential string `json:"access_credential,omitempty"`

	// Specify what authentication approach is adopted for the HTTP communications.
	// Supported types Basic", "Bearer" and api key header "X-ScannerAdapter-API-Key"
	//
	Auth string `json:"auth,omitempty"`

	// The name of this registration
	// Example: Trivy
	// Required: true
	Name *string `json:"name"`

	// A base URL of the scanner adapter.
	// Example: http://harbor-scanner-trivy:8080
	// Required: true
	// Format: uri
	URL *strfmt.URI `json:"url"`
}

// Validate validates this scanner registration settings
func (m *ScannerRegistrationSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScannerRegistrationSettings) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ScannerRegistrationSettings) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this scanner registration settings based on context it is used
func (m *ScannerRegistrationSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScannerRegistrationSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScannerRegistrationSettings) UnmarshalBinary(b []byte) error {
	var res ScannerRegistrationSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
